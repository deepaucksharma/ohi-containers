name: Complete Validation

on:
  push:
    branches: [ main, master ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'configs/**'
      - 'scripts/**'
      - 'testing/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'configs/**'
      - 'scripts/**'
      - 'testing/**'
      - '.github/workflows/**'
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sundays at midnight
  workflow_dispatch:

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    
    steps:
      - uses: actions/checkout@v3.5.3
      
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
      
      - name: Validate YAML files
        run: |
          find . -name "*.yml" -o -name "*.yaml" | xargs yamllint -c .github/workflows/yamllint-config.yml || true
  
  security-scan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    
    steps:
      - uses: actions/checkout@v3.5.3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'newrelic-infra:latest'
          format: 'table'
          exit-code: '1' # Fail CI on CRITICAL,HIGH vulnerabilities
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
  
  build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    
    steps:
      - uses: actions/checkout@v3.5.3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.9.1
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build and export Docker image
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          load: true
          tags: newrelic-infra:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      - name: Run image tests
        run: |
          chmod +x testing/tests/image_validation/layer_test.sh
          ./testing/tests/image_validation/layer_test.sh
      
      - name: Run integration tests
        run: |
          export NEW_RELIC_LICENSE_KEY=dummy012345678901234567890123456789
          chmod +x scripts/compose-helper.sh
          ./scripts/compose-helper.sh -f docker-compose.yml up -d
          
          # Wait for containers to be healthy
          timeout 300 bash -c 'until docker ps | grep -q "(healthy)"; do sleep 5; done'
          
          # Run tests
          docker exec test-runner sh -c "/testing/tests/run_all_tests.sh"
      
      - name: Collect logs
        if: always()
        run: |
          mkdir -p logs
          for container in $(docker ps -aq); do
            name=$(docker inspect --format='{{.Name}}' $container | sed 's/\///')
            echo "Collecting logs for $name"
            docker logs $container > logs/$name.log 2>&1 || true
          done
      
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3.1.3
        with:
          name: test-logs
          path: logs/
      
      - name: Clean up
        if: always()
        run: ./scripts/compose-helper.sh -f docker-compose.yml down -v

  multi-platform-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    
    steps:
      - uses: actions/checkout@v3.5.3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.2.0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.9.1
      
      - name: Build multi-platform image
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          tags: newrelic-infra:multi-arch
          outputs: type=image,name=newrelic-infra:multi-arch,push=false
