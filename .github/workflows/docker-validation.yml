name: Docker Validation Tests

on:
  push:
    branches: [ main, master ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'configs/**'
      - 'scripts/**'
      - 'testing/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'configs/**'
      - 'scripts/**'
      - 'testing/**'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  validate-docker-image:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Debug Environment
        run: |
          docker version
          docker compose version
          ls -la
          pwd
      
      - name: Make scripts executable
        run: |
          find . -name "*.sh" -exec chmod +x {} \;
      
      - name: Create output directory
        run: mkdir -p testing/output
      
      - name: Build Docker image first
        run: |
          docker build -t newrelic-infra:latest .
          docker images
      
      - name: Run image validation tests
        run: ./testing/tests/image_validation/layer_test.sh
      
      - name: Start the environment with Docker Compose v2
        env:
          NEW_RELIC_LICENSE_KEY: dummy012345678901234567890123456789
        run: |
          docker compose -f docker-compose.yml up -d --build
      
      - name: Wait for containers to be ready
        run: |
          echo "Waiting for containers to be healthy..."
          timeout 300 bash -c 'until docker ps | grep -q "(healthy)"; do sleep 5; done'
      
      - name: Run integration tests
        run: |
          docker ps
          if [ "$(docker ps -q -f name=test-runner)" ]; then
            docker exec test-runner sh -c "/testing/tests/run_all_tests.sh"
          else
            echo "test-runner container not found, running tests directly"
            docker run --rm \
              --network backend \
              -v $(pwd)/testing:/testing \
              -v $(pwd)/testing/output:/output \
              alpine:3.18 sh -c "cd /testing && ./tests/run_all_tests.sh"
          fi
      
      - name: Collect logs
        if: always()
        run: |
          mkdir -p logs
          for container in $(docker ps -aq); do
            name=$(docker inspect --format='{{.Name}}' $container | sed 's/\///')
            echo "Collecting logs for $name"
            docker logs $container > logs/$name.log 2>&1 || true
          done
      
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-logs-linux
          path: logs/
      
      - name: Clean up
        if: always()
        run: docker compose down -v
