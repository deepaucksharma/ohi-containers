services:
  # MySQL database for testing
  mysql:
    image: mysql:8.0
    container_name: test-mysql
    restart: unless-stopped
    networks:
      - backend
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-test}
      MYSQL_USER: ${MYSQL_USER:-newrelic}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-test_password}
    volumes:
      - ./testing/tests/fixtures/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./testing/tests/fixtures/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
    command: >
      --performance-schema=ON
      --table_definition_cache=400
      --table_open_cache=300
      --slow_query_log=ON
      --slow_query_log_file=/var/log/mysql/slow-query.log
      --long_query_time=0.5
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 3s
      retries: 5

  # PostgreSQL database for testing
  postgres:
    image: postgres:14
    container_name: test-postgres
    restart: unless-stopped
    networks:
      - backend
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    volumes:
      - ./testing/tests/fixtures/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./testing/tests/fixtures/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c track_activity_query_size=4096
      -c log_min_duration_statement=500
      -c log_statement=all
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Mock New Relic backend for testing
  mockbackend:
    image: wiremock/wiremock:2.35.0
    container_name: mock-newrelic
    networks:
      - backend
    volumes:
      - ./testing/tests/fixtures/wiremock:/home/wiremock:ro
    command: --verbose --global-response-templating
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080/__admin/mappings"]
      interval: 5s
      timeout: 3s
      retries: 3

  # New Relic Infrastructure Agent (under test)
  newrelic-infra:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: test-newrelic-infra
    networks:
      - backend
    depends_on:
      mysql:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mockbackend:
        condition: service_healthy
    environment:
      NRIA_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY:?err}
      NR_MOCK_MODE: "true"
      MYSQL_HOST: "mysql"
      MYSQL_PORT: "3306"
      MYSQL_USER: ${MYSQL_USER:-newrelic}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-test_password}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-test}
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: "5432"
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DATABASE: ${POSTGRES_DB:-postgres}
      # Additional environment variables for better monitoring
      NRIA_VERBOSE: "1"
      NRIA_DISPLAY_NAME: "Test Infrastructure"
      NRIA_METRICS_SYSTEM_SAMPLE_RATE: "15"
      NRIA_METRICS_STORAGE_SAMPLE_RATE: "15"
      NRIA_METRICS_NETWORK_SAMPLE_RATE: "15"
      NRIA_METRICS_PROCESS_SAMPLE_RATE: "15"
    volumes:
      - ./configs/newrelic-infra.yml.template:/etc/newrelic-infra.yml.template:ro
      - ./configs/:/etc/newrelic-infra/integrations.d:ro
      - ./testing/output:/var/log/test-results
      - ./testing/output:/var/log/newrelic-infra
      # Mount log directory as tmpfs to avoid excessive disk usage
      - type: tmpfs
        target: /var/log/newrelic-infra
        tmpfs:
          size: 100m
          uid: 1000
          gid: 1000
    # Let Docker use the HEALTHCHECK from the Dockerfile

  # Test runner
  test-runner:
    image: alpine:3.18
    container_name: test-runner
    networks:
      - backend
    depends_on:
      newrelic-infra:
        condition: service_healthy
    volumes:
      - ./testing:/testing:ro
      - ./testing/output:/output
    command: sh -c "cd /testing && ./tests/run_all_tests.sh"

# Define networks
networks:
  # Internal network for communication between services
  # Note: 'internal: true' is great for testing but prevents the agent from reaching
  # New Relic endpoints in production. Use docker-compose.prod.yml for production deployments.
  backend:
    driver: bridge
    internal: true
